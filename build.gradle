
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "MavenRepo"
            url = "https://repo.maven.apache.org/maven2"
        }
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath "de.undercouch:gradle-download-task:3.1.2"
    }
}

apply plugin: 'forge'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}
version = "0.1—Å"
group= "" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "chestup"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

processResources
{
	exclude '**/*.xcf'
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

	doLast {
		def propsFile = new File(destinationDir, 'version.properties')
		def properties = new Properties()
		properties['chestup.build.mcversion'] = project.minecraft.version
		properties.store(propsFile.newWriter(), null)
	}
}

jar {
    classifier = 'universal'
    version = "${project.minecraft.version}-${project.version}"

}

println "FISHBUM ${jar.version}"

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'src'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
    version = "${project.minecraft.version}-${project.version}"
}

// Tell the artifact system about our extra jars
artifacts {
	archives sourceJar, deobfJar
}

// Configure an upload task. this is setup for uploading to files.minecraftforge.net. There are other examples around
uploadArchives {
    dependsOn 'reobf'
    repositories {
        if (project.hasProperty("filesmaven")) {
            logger.info('Publishing to files server')
            
            mavenDeployer {
                configuration = configurations.deployJars

                repository(url: project.filesmaven.url) {
                    authentication(userName: project.filesmaven.username, privateKey: project.filesmaven.key)
                }

                // This is just the pom data for the maven repo
                pom {
                    groupId = project.group
                    // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                    version = "${project.minecraft.version}-${project.version}"
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'IronChest'
                        url 'https://github.com/cpw/IronChest'

                        scm {
                            url 'https://github.com/progwml6/IronChest'
                            connection 'scm:git:git://github.com/progwml6/IronChest.git'
                            developerConnection 'scm:git:git@github.com:progwml6/IronChest.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/progwml6/IronChest/issues'
                        }

                        licenses {
                            license {
                                name 'GNU Public License (GPL), Version 3.0'
                                url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'cpw'
                                name 'cpw'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        } else {
            logger.info('Publishing to repo folder')
            
            mavenDeployer {
                pom.version = "${project.minecraft.version}-${project.version}"
                repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
            }
        }
    }
}

// This is a special task for pulling the version information from git and the environment (for BUILD_NUMBER)
def getGitVersion()
{
	def out = [:]

	// call git command.
	def outStream = new ByteArrayOutputStream()
	def result = exec {
		executable = 'git'
		args = [ 'describe', '--long', "--match=[^(jenkins)]*"]
		standardOutput = outStream
	}

	def fullVersion = outStream.toString().trim()
	def matcher = fullVersion =~ /(\d+).(\d+)-(\d+)-(.*)/

	def maj = matcher[0][1]
	def min = matcher[0][2]
	def rev = matcher[0][3]
	def bn = System.getenv("BUILD_NUMBER") ?: "1"

	out['IronChest.build.major.number'] = maj.toString()
	out['IronChest.build.minor.number'] = min.toString()
	out['IronChest.build.revision.number'] = rev.toString()
	out['IronChest.build.githash'] = matcher[0][4].toString()
	out['IronChest.build.number' ] = bn.toString()
	out['IronChest.version' ] = "${maj}.${min}.${rev}.${bn}".toString()

	return out
}
